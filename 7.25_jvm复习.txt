1,jvm的组成
（类加载器+方法区+执行引擎+本地库接口）
运行时数据区（方法区和堆）
线程中含有的东西（java虚拟机栈+本地方法栈+程序计数器）-该区为线程私有
针对线程的运行时间（抢占式的调度运行）线程抢占cpu的时间片，线程计数器将存储下一次时间片抢占时运行的位置
2，java对于调用的理解（栈帧）
调用方法的时候会对应的创建一个栈的栈帧，方便进行程序的回调（先进先出）
栈（方法过多嵌套导致栈的深度过深（stackoverflow）
栈过多导致内存过高
本地方法栈描述的是native方法的运行（本地的底层语言）
====================================================
堆————垃圾回收的主要地方
垃圾回收的方法

可达性分析（如何定位垃圾）
（引用计数法，存在引用+1，引用失败-1，==0说明对象不存在引用）存在一堆垃圾循环引用的情况
（可达性分析。从根节点进行检查，能在堆中找到的对象标记为可达对象）
===========
垃圾回收算法
标记清除（存在内存碎片）
标记复制（浪费内存）
标记压缩
分代回收机制
老年代--年轻代
（jdk版本不同存在的设置不同）
1.7->1.8
存在改动
