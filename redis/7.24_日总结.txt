1,redis的键淘汰策略
定期删除（非全表扫描，而是基于贪心算法而进行的）
ex：例如一个字典每次进行0.2的检测，如果这0.2的字典中有百分之20的过期键，则进行继续扫描
惰性删除
访问的时候检测过期性，如果过期则直接进行删除
一般来说这两个策略是一起进行的
2，redis中的内存淘汰策略
    1，直接限制写入noeviction
      描述：当内存达到限制时，不再接受写入请求，直接返回错误。
    2，LRU（最久未使用）
    3.volatile-lru（只对设置了过期时间的key进行LRU）
    4，allkeys-random（纯随机，无论是否设置了过期键）
    5，volatile-random（纯随机删除设置了过期的键）
    6， volatile-ttl (Time to Live)淘汰寿命短的
    7，allkeys-lfu (Least Frequently Used)
    8，volatile-lfu只对设置过期的键进行
3，redis中的分布式锁策略（针对多个节点的操作来保持数据的一致性）
  redlock
    使用的场景：（主从节点存在同步的不一致性问题）
     客户端A从master获取到锁
     在master将锁同步到slave之前，master宕掉了。
     slave节点被晋级为master节点
     客户端B从新的master获取到锁
    这个锁对应的资源之前已经被客户端A已经获取到了，但是b也拿到了关于这个资源的锁。
redlock
如何确保这个锁的内容对应一个事务：
每个节点都需要设置相同的过期时间和随机字符串
将一个事务的的锁加入到多个节点中，这样如果一个节点进行失效，其余节点的锁也可以维持事务的一致性
redis的成功条件，在一半的集群上进行成功的加锁（5个redis实例成功3个）
然后计算锁的失效时间，失效的时间应远小于锁的自动失效时间（10s过期，超时时间应该设置为50ms）
确保实例失效的情况下客户端能最快的速度切换节点
4，redis中的看门狗（防止上锁的实例发生宕机）
Redisson实例被关闭前，不断的延长锁的有效期。（30s）
还可以这样：
// 为加锁等待100秒时间，并在加锁成功10秒钟后自动解开
boolean res = lock.tryLock(100, 10, TimeUnit.SECONDS);
使用Redlock算法的开销比其他方式要高，并且并不是绝对的可靠，因此需要根据具体场景进行选择
