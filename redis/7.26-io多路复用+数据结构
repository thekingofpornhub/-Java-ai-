1,redis中查询的时间成本低
时间成本高的地方在于事务的调用（我们也称为线程的转换，句柄的转换）
io多路复用其实就是一种同步IO模型，它实现了一个线程可以监视多个文件句柄；一旦某个文件句柄就绪，
就能够通知应用程序进行相应的读写操作；而没有文件句柄就绪时,就会阻塞应用程序，交出cpu

========================
redis中的字符串----动态字符串
SDS（新加入字符串的长度）
redis5中
更紧凑的头部结构：根据字符串的长度，使用不同大小的头部结构（如 SDS5、SDS8、SDS16 等），以节省内存
普通字符串的查询长度效率低，/0的标志位容易出现内存溢出以及错误修改
列表-----双端链表+压缩链表
因为双端链表占用的内存比压缩列表要多， 所以当创建新的列表键时， 列表会优先考虑使用压缩列表作为底层实现， 并且在有需要的时候， 才从压缩列表实现转换到双端链表实现。
哈希表-----压缩链表+字典
集合----字典
有序集合----压缩链表+跳跃表
