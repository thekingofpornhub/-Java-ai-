单路排序和双路排序（回表排序），filesort文件排序方式（聚簇索引）
单路排序和双路排序是MySQL中的两种文件排序方式，主要用于`ORDER BY`子句的排序操作。以下是它们的区别和适用场景：

### 单路排序（一次性取出索引的全部字段进行排序）（内存要求大，io次数小）
- **过程**：一次性取出满足条件行的所有字段，然后在`sort buffer`中进行排序¹²。
- **优点**：避免了二次读取数据，把随机IO变成了顺序IO，效率较高¹²。
- **缺点**：会使用更多的内存空间¹²。

### 双路排序（先取出标志位排序）（小内存，多io）
- **过程**：先根据相应的条件取出排序字段和行ID，然后在`sort buffer`中进行排序，排序完后需要再次取回其它需要的字段¹²。
- **优点**：内存使用较少¹²。
- **缺点**：需要二次读取数据，效率较低¹²。

### 选择依据
- MySQL优化器会根据`max_length_for_sort_data`变量来决定使用哪种排序方式（>1024字节则进行双路排序）。如果查询的列字段大于该变量，则会使用双路排序，反之则使用单路排序¹²。

userindex和userfile（区别，userfilesort读取的是innodb的聚集索引，而index则是ibd（索引文件中的）只读的部分索引（由索引树导致的））
userindex读取的索引文件较小，效率较高

单路和双路都是根据聚簇索引进行的（参数大概率不需要调试）
========================================================================================================
索引的优化
sql的索引
索引的最左匹配原则
走索引的情况（数据库的大小会导致结果发生变化）
索引的下推以及索引覆盖（索引覆盖所有的数据）
例子：索引（a,b,c）
索引的下推（将ab或abc直接在索引查找的时候就进行判断，增加了一次索引查找的复杂度，但是降低了回表难度）
存储引擎将索引交给server层，server层来判断是否符合其余的查询语句
========================================================================================================
mysql的结构
===========
server层
mysql查询缓存（在8.0中被移除）（跟redis原理类似但是效率较低）
连接器（校验权限，权限在链接建立之后不可改变（可以设置过期时间））
解析器
优化器
执行器
（跟编译原理的词法分析器类似）
============
存储引擎层（innodb）
============
内存结构（buffer pool）
缓冲池以页为存储单位（16kb）
LRU算法进行页的淘汰，按照3：5的比例将页分为老年代和青年代（jvm的垃圾处理机制类似）
============
磁盘结构（）

每个InnoDB表都包含一个称为聚簇索引的索引
============
logbuffer
版本链机制（便于数据库宕机之后的版本回滚）
==========================
important!!!!!
MVCC(多并发版本控制)
版本链机制的应用
当版本号处于正确的区间的时候，事务才可以被正确的创建（事务可见）
为了支持多版本，InnoDB对行记录又额外维护了几个字段：
1、DB_TRX_ID：插入或更新航记录的事务的事务ID
2、DB_ROLL_PTR：即回滚指针，指向回滚段中的undo log record




